#------------------------------------------------------------------------------#
# Copyright (c) 2014 Los Alamos National Security, LLC
# All rights reserved.
#------------------------------------------------------------------------------#

################################################################################
# Please Do Not Edit This File Unless You Know What You Are Doing!!!
#
# Project-specific configuration rules should be added in the 'config'
# subdirectory of the top-level of this project in the appropriate file,
# e.g., package configuration options should go in 'config/packages.cmake'.
#
# For more documentation on the design philosophy of this build system
# and the recognized configuration files that can be added to the 'config'
# subdirectory, please look in 'cinch/README.md' and 'cinch/INSTALL.md'
# from the top-level of this project.
#
# Any changes to the basic build template should be discussed with the
# project maintainers.
################################################################################

#------------------------------------------------------------------------------#
# Require some version of cmake
#------------------------------------------------------------------------------#

# We are using target_include_directories, which is a cmake-3.0 feature
cmake_minimum_required(VERSION 3.0)

#------------------------------------------------------------------------------#
# Add path for cinch modules
#------------------------------------------------------------------------------#

list(APPEND CMAKE_MODULE_PATH ${CINCH_SOURCE_DIR}/cmake)

#------------------------------------------------------------------------------#
# Cinch includes
#------------------------------------------------------------------------------#

include(cinch_install_headers)
include(cinch_minimum_required)
include(insource)
include(test-execution-policy)
include(unit)
include(version)

#------------------------------------------------------------------------------#
# Set to release if no build type has been specified
#------------------------------------------------------------------------------#

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING
        "CMake build type <Debug|Release|RelWithDebInfo|MinSizeRel>" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug" OR
    "${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    add_definitions(-DDEBUG)
endif("${CMAKE_BUILD_TYPE}" STREQUAL "Debug" OR
    "${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")

#------------------------------------------------------------------------------#
# Print useful information
#------------------------------------------------------------------------------#

if(CMAKE_INSTALL_PREFIX)
    message(STATUS "Install prefix set to ${CMAKE_INSTALL_PREFIX}")
endif(CMAKE_INSTALL_PREFIX)

if(CMAKE_CXX_FLAGS)
    message(STATUS "C++ compiler flags set to ${CMAKE_CXX_FLAGS}")
endif(CMAKE_CXX_FLAGS)

if(CMAKE_C_FLAGS)
    message(STATUS "C compiler flags set to ${CMAKE_C_FLAGS}")
endif(CMAKE_C_FLAGS)

if(CMAKE_FORTRAN_FLAGS)
    message(STATUS "Fortran compiler flags set to ${CMAKE_FORTRAN_FLAGS}")
endif(CMAKE_FORTRAN_FLAGS)

#------------------------------------------------------------------------------#
# Set top-level flag
#------------------------------------------------------------------------------#

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
    set(CINCH_TOP_LEVEL_PROJECT True)
endif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})

#------------------------------------------------------------------------------#
# Create a version for the project
#------------------------------------------------------------------------------#

set(VERSION_CREATION "git describe" CACHE STRING "Set a static version")

if(NOT "${VERSION_CREATION}" STREQUAL "git describe")
    set(${PROJECT_NAME}_VERSION ${VERSION_CREATION})
else()
    cinch_make_version()
endif(NOT "${VERSION_CREATION}" STREQUAL "git describe")

message(STATUS "Creating build for version "
    "${PROJECT_NAME}-${${PROJECT_NAME}_VERSION}")

#------------------------------------------------------------------------------#
# Keep users from creating insource builds.
#------------------------------------------------------------------------------#

cinch_prevent_insource_builds()


#--------------------------------------------------------------------------#
# Add support for Boost preprocessor.
#--------------------------------------------------------------------------#

option(ENABLE_BOOST_PREPROCESSOR "Enable Boost.Preprocessor subset" OFF)

if(ENABLE_BOOST_PREPROCESSOR)
    include_directories(${CINCH_SOURCE_DIR}/boost/preprocessor/include)
endif()

#--------------------------------------------------------------------------#
# Add support for GFlags
#--------------------------------------------------------------------------#

option(ENABLE_GFLAGS "Enable command-line flag support" OFF)

if(ENABLE_GFLAGS)
    find_package(GFlags)

    if(GFlags_FOUND)
        # We found a system or local installation
        include_directories(${GFlags_INCLUDE_DIRS})
    else()
        # Build it ourselves
        add_subdirectory(${CINCH_SOURCE_DIR}/gflags
            ${CMAKE_BINARY_DIR}/cinch/gflags)
        include_directories(${CMAKE_BINARY_DIR}/cinch/gflags/include)
        set(GFLAGS_LIBRARIES gflags)
    endif()

    # Add this to the compile definitions
    add_definitions(-DENABLE_GFLAGS)
endif()

#--------------------------------------------------------------------------#
# Add clog logging
#--------------------------------------------------------------------------#

include_directories(${CINCH_SOURCE_DIR}/logging)

# Add an option to set the strip level
set(CLOG_STRIP_LEVEL "0" CACHE STRING "Set the clog strip level")
add_definitions(-DCLOG_STRIP_LEVEL=${CLOG_STRIP_LEVEL})

# Allow color output
option(CLOG_COLOR_OUTPUT "Enable colorized clog logging" ON)
if(CLOG_COLOR_OUTPUT)
    add_definitions(-DCLOG_COLOR_OUTPUT)
endif()

# Enable tag groups
option(CLOG_ENABLE_TAGS "Enable tag groups" OFF)
if(CLOG_ENABLE_TAGS)
    set(CLOG_TAG_BITS "16" CACHE STRING
        "Select the number of bits to use for tag groups.")
    add_definitions(-DCLOG_ENABLE_TAGS)
    add_definitions(-DCLOG_TAG_BITS=${CLOG_TAG_BITS})
endif()

# MPI
if(MPI_${MPI_LANGUAGE}_FOUND)
    option(CLOG_ENABLE_MPI "Enable clog MPI functions" OFF)
    if(CLOG_ENABLE_MPI)
        add_definitions(-DCLOG_ENABLE_MPI)
    endif()
endif()

#--------------------------------------------------------------------------#
# Add support for ctest, GTest, and pFUnit
#--------------------------------------------------------------------------#

option(ENABLE_UNIT_TESTS "Enable unit testing" OFF)
option(ENABLE_COLOR_UNIT_TESTS "Enable colorized unit testing output" OFF)
option(ENABLE_JENKINS_OUTPUT
    "Generate jenkins xml output for every test" OFF)

if(ENABLE_UNIT_TESTS)

    enable_testing()

    #----------------------------------------------------------------------#
    # Google Test
    #----------------------------------------------------------------------#

    find_package(GTest QUIET)

    if(GTEST_FOUND)
      include_directories(${GTEST_INCLUDE_DIRS})
    else()
      find_package(Threads)
      add_library(gtest
        ${CINCH_SOURCE_DIR}/gtest/googletest/src/gtest-all.cc)
      target_include_directories(gtest PRIVATE
        ${CINCH_SOURCE_DIR}/gtest/googletest)
      target_link_libraries(gtest ${CMAKE_THREAD_LIBS_INIT})
      include_directories(${CINCH_SOURCE_DIR}/gtest/googlemock/include)
      include_directories(${CINCH_SOURCE_DIR}/gtest/googletest)
      include_directories(${CINCH_SOURCE_DIR}/gtest/googletest/include)
      set(GTEST_LIBRARIES gtest)
    endif()

    include_directories(${CINCH_SOURCE_DIR}/auxiliary)

    #----------------------------------------------------------------------#
    # pFUnit
    #----------------------------------------------------------------------#

    get_property(LANGUAGES GLOBAL PROPERTY ENABLED_LANGUAGES)

    list(FIND LANGUAGES "Fortran" FORTRAN_ENABLED)

    if(FORTRAN_ENABLED EQUAL -1)
        set(FORTRAN_ENABLED FALSE)
    endif(FORTRAN_ENABLED EQUAL -1)

    if(FORTRAN_ENABLED)
        find_package(PythonInterp QUIET)
        find_package(pFUnit QUIET)

        if(PFUNIT_FOUND)
            include_directories(${PFUNIT_INCLUDE_DIR})
        else()
            include(${CINCH_SOURCE_DIR}/cmake/PFUnitLists.txt)
        endif()
    endif()

    #----------------------------------------------------------------------#
    # Add default execution polices
    #----------------------------------------------------------------------#

    cinch_add_test_execution_policy(SERIAL
        ${CINCH_SOURCE_DIR}/auxiliary/test-standard.cc
    )

    cinch_add_test_execution_policy(SERIAL_DEVEL
        ${CINCH_SOURCE_DIR}/auxiliary/test-standard.cc
        DEFINES "-DCINCH_DEVEL_TEST"
    )

    if(FORTRAN_ENABLED)
        cinch_add_test_execution_policy(FORTRAN
            ${PFUNIT_DRIVER}
            LIBRARIES ${PFUNIT_LIBRARY})
    endif(FORTRAN_ENABLED)

    # Need to collect extra runtime libraries into a standard variable
    # that users can add to their unit test defines if needed.
    set(CINCH_RUNTIME_INCLUDES)
    set(CINCH_RUNTIME_FLAGS)
    set(CINCH_RUNTIME_LIBRARIES)

    # MPI Runtime
    if(MPI_${MPI_LANGUAGE}_FOUND)
        cinch_add_test_execution_policy(MPI
            ${CINCH_SOURCE_DIR}/auxiliary/test-mpi.cc
            FLAGS ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
            INCLUDES ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
            LIBRARIES ${MPI_${MPI_LANGUAGE}_LIBRARIES}
            EXEC ${MPIEXEC}
            EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG}
        )

        cinch_add_test_execution_policy(MPI_DEVEL
            ${CINCH_SOURCE_DIR}/auxiliary/test-mpi.cc
            FLAGS ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
            INCLUDES ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
            DEFINES "-DCINCH_DEVEL_TEST"
            LIBRARIES ${MPI_${MPI_LANGUAGE}_LIBRARIES}
            EXEC ${MPIEXEC}
            EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG}
        )

        set(CINCH_RUNTIME_FLAGS ${CINCH_RUNTIME_FLAGS}
            ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
        )
        set(CINCH_RUNTIME_INCLUDES ${CINCH_RUNTIME_INCLUDES}
            ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
        )
        set(CINCH_RUNTIME_LIBRARIES ${CINCH_RUNTIME_LIBRARIES}
            ${MPI_${MPI_LANGUAGE}_LIBRARIES}
        )
    endif()

    # Legion Runtime
    if(Legion_FOUND)
        add_definitions(-DLEGION_CMAKE)
        cinch_add_test_execution_policy(LEGION
           ${CINCH_SOURCE_DIR}/auxiliary/test-legion.cc
           FLAGS ${Legion_CXX_FLAGS}
           INCLUDES ${Legion_INCLUDE_DIRS}
           LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS})

        cinch_add_test_execution_policy(LEGION_DEVEL
           ${CMAKE_SOURCE_DIR}/cinch/auxiliary/test-legion.cc
           FLAGS ${Legion_CXX_FLAGS}
           DEFINES "-DCINCH_DEVEL_TEST"
           INCLUDES ${Legion_INCLUDE_DIRS}
           LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS})

        set(CINCH_RUNTIME_FLAGS ${CINCH_RUNTIME_FLAGS} ${Legion_CXX_FLAGS})
        set(CINCH_RUNTIME_INCLUDES ${CINCH_RUNTIME_INCLUDES}
            ${Legion_INCLUDE_DIRS})
        set(CINCH_RUNTIME_LIBRARIES ${CINCH_RUNTIME_LIBRARIES}
            ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
        )
    endif()

    if(MPI_${MPI_LANGUAGE}_FOUND AND Legion_FOUND)
        cinch_add_test_execution_policy(MPILEGION
            ${CINCH_SOURCE_DIR}/auxiliary/test-mpilegion.cc
            FLAGS ${Legion_CXX_FLAGS}
                ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
            INCLUDES ${Legion_INCLUDE_DIRS}
                ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
            LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
                ${MPI_${MPI_LANGUAGE}_LIBRARIES}
            EXEC ${MPIEXEC}
            EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG}) 

        cinch_add_test_execution_policy(MPILEGION_DEVEL
            ${CMAKE_SOURCE_DIR}/cinch/auxiliary/test-mpilegion.cc
            FLAGS ${Legion_CXX_FLAGS}
                ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
            INCLUDES ${Legion_INCLUDE_DIRS}
                ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
            DEFINES "-DCINCH_DEVEL_TEST"
            LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
                ${MPI_${MPI_LANGUAGE}_LIBRARIES}
            EXEC ${MPIEXEC}
            EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG})

        set(CINCH_RUNTIME_FLAGS ${CINCH_RUNTIME_FLAGS}
            ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS} ${Legion_CXX_FLAGS}
        )
        set(CINCH_RUNTIME_INCLUDES ${CINCH_RUNTIME_INCLUDES}
            ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH} ${Legion_INCLUDE_DIRS}
        )
        set(CINCH_RUNTIME_LIBRARIES ${CINCH_RUNTIME_LIBRARIES}
            ${MPI_${MPI_LANGUAGE}_LIBRARIES} 
            ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
        )

    endif()


endif(ENABLE_UNIT_TESTS)

#------------------------------------------------------------------------------#
# Formatting options for emacs and vim.
# vim: set tabstop=4 shiftwidth=4 filetype=cmake expandtab :
#------------------------------------------------------------------------------#
