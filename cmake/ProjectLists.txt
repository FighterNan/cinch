#------------------------------------------------------------------------------#
# Copyright (c) 2014 Los Alamos National Security, LLC
# All rights reserved.
#------------------------------------------------------------------------------#

################################################################################
# Please Do Not Edit This File Unless You Know What You Are Doing!!!
#
# Project-specific configuration rules should be added in the 'config'
# subdirectory of the top-level of this project in the appropriate file,
# e.g., package configuration options should go in 'config/packages.cmake'.
#
# For more documentation on the design philosophy of this build system
# and the recognized configuration files that can be added to the 'config'
# subdirectory, please look in 'cinch/README.md' and 'cinch/INSTALL.md'
# from the top-level of this project.
#
# Any changes to the basic build template should be discussed with the
# project maintainers.
################################################################################

#------------------------------------------------------------------------------#
# Require some version of cmake
#------------------------------------------------------------------------------#

cmake_minimum_required(VERSION 2.8)

#------------------------------------------------------------------------------#
# Add path for cinch modules
#------------------------------------------------------------------------------#

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cinch/cmake)

#------------------------------------------------------------------------------#
# Cinch includes
#------------------------------------------------------------------------------#

include(info)
include(common)
include(include_links)
include(insource)
include(subdirlist)
include(unit)
include(unit-execution-policy)
include(documentation)
include(library)
include(application)
include(subproject)
include(doxygen)
include(version)
include(mpi)

#------------------------------------------------------------------------------#
# Print useful information
#------------------------------------------------------------------------------#

if(CMAKE_INSTALL_PREFIX)
    message(STATUS "Install prefix set to ${CMAKE_INSTALL_PREFIX}")
endif(CMAKE_INSTALL_PREFIX)

if(CMAKE_CXX_FLAGS)
    message(STATUS "C++ compiler flags set to ${CMAKE_CXX_FLAGS}")
endif(CMAKE_CXX_FLAGS)

if(CMAKE_C_FLAGS)
    message(STATUS "C compiler flags set to ${CMAKE_C_FLAGS}")
endif(CMAKE_C_FLAGS)

if(CMAKE_FORTRAN_FLAGS)
    message(STATUS "Fortran compiler flags set to ${CMAKE_FORTRAN_FLAGS}")
endif(CMAKE_FORTRAN_FLAGS)

#------------------------------------------------------------------------------#
# Initialize these to avoid capture of parent state
#------------------------------------------------------------------------------#

unset(CINCH_TOP_LEVEL_PROJECT)
unset(CINCH_APPLICATION_DIRECTORIES)
unset(CINCH_LIBRARY_TARGETS)
unset(CINCH_SUBPROJECTS)
unset(CINCH_UNIT_EXECUTION_POLICIES)

# This is a cache variable, i.e., global.  DO NOT REMOVE THE CACHE ARGUMENT
unset(CINCH_UNIT_TEST_TARGETS CACHE)

#------------------------------------------------------------------------------#
# Set top-level flag
#------------------------------------------------------------------------------#

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
    set(CINCH_TOP_LEVEL_PROJECT True)
endif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})

#------------------------------------------------------------------------------#
# Include project configuration
#------------------------------------------------------------------------------#

include(${CMAKE_CURRENT_SOURCE_DIR}/config/project.cmake)

#------------------------------------------------------------------------------#
# Create a version for the project
#------------------------------------------------------------------------------#

set(VERSION_CREATION "git describe" CACHE STRING "Set a static version")

if(NOT ${VERSION_CREATION} STREQUAL "git describe")
    set(${PROJECT_NAME}_VERSION ${VERSION_CREATION})
else()
    cinch_make_version()
endif(NOT ${VERSION_CREATION} STREQUAL "git describe")

message(STATUS "Creating build for version "
    "${PROJECT_NAME}-${${PROJECT_NAME}_VERSION}")

#------------------------------------------------------------------------------#
# Keep users from creating insource builds.
#------------------------------------------------------------------------------#

cinch_prevent_insource_builds()

#------------------------------------------------------------------------------#
# Include package requirements
#------------------------------------------------------------------------------#

include(${CMAKE_CURRENT_SOURCE_DIR}/config/packages.cmake)

#------------------------------------------------------------------------------#
# Include project documentation
#------------------------------------------------------------------------------#

include(${CMAKE_CURRENT_SOURCE_DIR}/config/documentation.cmake)

#------------------------------------------------------------------------------#
# Add top-level targets
#------------------------------------------------------------------------------#

if(${CINCH_TOP_LEVEL_PROJECT})

    #--------------------------------------------------------------------------#
    # This is a top-level build
    #--------------------------------------------------------------------------#

    add_custom_target(distclean rm -rf ${CMAKE_BINARY_DIR}/*)
    set(CINCH_CONFIG_INFOTAG)

    #--------------------------------------------------------------------------#
    # Remove include links
    #--------------------------------------------------------------------------#

    if(EXISTS ${CMAKE_BINARY_DIR}/include)
        file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/include)
    endif(EXISTS ${CMAKE_BINARY_DIR}/include)

    #--------------------------------------------------------------------------#
    # Add support for ctest and GTest
    #--------------------------------------------------------------------------#

    option(ENABLE_UNIT_TESTS "Enable unit testing" OFF)
    option(ENABLE_JENKINS_OUTPUT
        "Generate jenkins xml output for every test" OFF)

    if(ENABLE_UNIT_TESTS)

        enable_testing()
        find_package(GTest QUIET)

        if(GTEST_FOUND)
          include_directories(${GTEST_INCLUDE_DIRS})
        else()
          add_subdirectory(cinch/gtest)
          include_directories(cinch/gtest/include)
          set(GTEST_LIBRARIES gtest)
          set(GTEST_MAIN_LIBRARIES gtest_main)
        endif()

        #----------------------------------------------------------------------#
        # Add default execution polices
        #----------------------------------------------------------------------#

        if(${MPI_C_FOUND})
            cinch_add_unit_execution_policy(MPI
                ${CMAKE_SOURCE_DIR}/cinch/gtest-runtime/gtest-mpi.cc
                LIBRARIES ${MPI_C_LIBRARIES}
                EXEC ${MPIEXEC}
                EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG})
        endif(${MPI_C_FOUND})

    endif(ENABLE_UNIT_TESTS)

else()

    #--------------------------------------------------------------------------#
    # This is a submodule
    #--------------------------------------------------------------------------#

    set(CINCH_CONFIG_INFOTAG "${PROJECT_NAME}.")

endif(${CINCH_TOP_LEVEL_PROJECT})

#------------------------------------------------------------------------------#
# Add support for Doxygen documentation
#
# NOTE: This depends on CINCH_CONFIG_INFOTAG being set.
#------------------------------------------------------------------------------#

cinch_add_doxygen()

#------------------------------------------------------------------------------#
# Set output directories for targets
#------------------------------------------------------------------------------#

# Global project settings
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

#------------------------------------------------------------------------------#
# Add local include subdirectory.
#
# This is populated by calls to cinch_make_include_links below.
#------------------------------------------------------------------------------#

include_directories(${CMAKE_BINARY_DIR}/include)

#------------------------------------------------------------------------------#
# Add sub-projects
#------------------------------------------------------------------------------#

if(CINCH_SUBPROJECTS)
    foreach(subproject ${CINCH_SUBPROJECTS})
        string(REPLACE ":" ";" subproject_data ${subproject})

        list(GET subproject_data 0 subproject_name)

        # This value is currently unused
        #list(GET subproject_data 1 subproject_libraries)

        add_subdirectory(${subproject_name})

    endforeach(subproject)
endif(CINCH_SUBPROJECTS)

#------------------------------------------------------------------------------#
# Library target
#------------------------------------------------------------------------------#

if(CINCH_LIBRARY_TARGETS)

    #--------------------------------------------------------------------------#
    # Process library targets
    #--------------------------------------------------------------------------#

    foreach(library_target ${CINCH_LIBRARY_TARGETS})

        string(REPLACE ":" ";" library_target_list ${library_target})

        list(GET library_target_list 0 library_target_name)
        list(GET library_target_list 1 library_target_directory)

        #----------------------------------------------------------------------#
        # Add the subdirectory
        #----------------------------------------------------------------------#

        add_subdirectory(${library_target_directory})

        #----------------------------------------------------------------------#
        #----------------------------------------------------------------------#

        cinch_make_include_links(${library_target_name}
            ${CMAKE_CURRENT_SOURCE_DIR}/${library_target_directory})

        #----------------------------------------------------------------------#
        # Set individual library links for parent
        #
        # This allows users to select individual libraries from a submodule
        # without including the entire submodule.
        #----------------------------------------------------------------------#

        if(NOT ${CINCH_TOP_LEVEL_PROJECT})
            set(${library_target_name}_LINKLIBS ${library_target_name}
                PARENT_SCOPE)
        endif(NOT ${CINCH_TOP_LEVEL_PROJECT})

        #----------------------------------------------------------------------#
        # Add target to global link libraries
        #
        # This adds the current library target to the global link
        # libraries.
        #----------------------------------------------------------------------#

        list(APPEND ${PROJECT_NAME}_LINKLIBS ${library_target_name})

        #----------------------------------------------------------------------#
        # Generate info target
        #----------------------------------------------------------------------#

        cinch_make_info("${CINCH_CONFIG_INFOTAG}${library_target_name}"
            "${${library_target_name}_HEADERS}"
            "${${library_target_name}_SOURCES}")

        #----------------------------------------------------------------------#
        # Create relative paths for headers
        #----------------------------------------------------------------------#

        unset(relative_headers)
        foreach(header ${${library_target_name}_HEADERS})
            string(REGEX REPLACE
                "${CMAKE_CURRENT_SOURCE_DIR}/${library_target_directory}" ""
                relative_header ${header})
            list(APPEND relative_headers ${relative_header})
        endforeach(header)

        #----------------------------------------------------------------------#
        # Add a rule to build the library
        #----------------------------------------------------------------------#

        if(NOT "${${library_target_name}_SOURCES}" STREQUAL "")
            add_library(${library_target_name}
                ${${library_target_name}_SOURCES})
        endif()

        #----------------------------------------------------------------------#
        # Add install targets
        #----------------------------------------------------------------------#

        if(NOT "${${library_target_name}_SOURCES}" STREQUAL "")
             install(TARGETS ${library_target_name} DESTINATION lib)
        endif()

        if(${library_target_name}_PUBLIC_HEADERS)
            foreach(file ${${library_target_name}_PUBLIC_HEADERS})
                install(FILES ${library_target_directory}/${file} DESTINATION
                    include/${library_target_name})
            endforeach(file ${${library_target_name}_PUBLIC_HEADERS})
        endif(${library_target_name}_PUBLIC_HEADERS)

        foreach(file ${relative_headers})
            get_filename_component(DIR ${file} DIRECTORY)
            install(FILES ${library_target_directory}/${file} DESTINATION
                include/${library_target_name}/${DIR})
        endforeach(file)

    endforeach(library_target)

    #--------------------------------------------------------------------------#
    # Set these for parent level build
    #--------------------------------------------------------------------------#

    if(NOT ${CINCH_TOP_LEVEL_PROJECT})
        set(${PROJECT_NAME}_LINKLIBS ${${PROJECT_NAME}_LINKLIBS} PARENT_SCOPE)
    else()
        set(CINCH_LINK_LIBRARIES ${${PROJECT_NAME}_LINKLIBS})
    endif(NOT ${CINCH_TOP_LEVEL_PROJECT})

endif(CINCH_LIBRARY_TARGETS)

#------------------------------------------------------------------------------#
# Add unit tests.
#------------------------------------------------------------------------------#

if(${CINCH_TOP_LEVEL_PROJECT})

message(STATUS "DEBUG unit targets ${CINCH_UNIT_TEST_TARGETS}")
    foreach(unit ${CINCH_UNIT_TEST_TARGETS})
        
        #----------------------------------------------------------------------#
        # Unpack information for this unit test
        #----------------------------------------------------------------------#
message(STATUS "DEBUG unit string ${unit}")
        string(REPLACE ":" ";" unit_target_list ${unit})

        list(GET unit_target_list 0 unit_target_name)
        list(GET unit_target_list 1 unit_target_directory)
        list(GET unit_target_list 2 unit_target_sources)
        list(GET unit_target_list 3 unit_target_libraries)
        list(GET unit_target_list 4 unit_target_execution_policy)
        list(GET unit_target_list 5 unit_target_execution_threads)

        set(_UNIT_SOURCES)

        # Create the full path to the source files
        foreach(source ${unit_target_sources})
            list(APPEND _UNIT_SOURCES "${unit_target_directory}/${source}")
        endforeach(source)

        #----------------------------------------------------------------------#
        # Check to see if the user has specified and runtime and
        # process it
        #----------------------------------------------------------------------#

        set(unit_policy_runtime)

        # Get policy information
        if(NOT "${unit_target_execution_policy}" STREQUAL "Serial")
            string(REPLACE ":" ";" unit_policy_list
                ${${unit_target_execution_policy}_UNIT_POLICY_LIST})

            list(GET unit_policy_list 0 unit_policy_name)
            list(GET unit_policy_list 1 unit_policy_runtime)
            list(GET unit_policy_list 2 unit_policy_libraries)
            list(GET unit_policy_list 3 unit_policy_exec)
            list(GET unit_policy_list 4 unit_policy_exec_threads)
        endif(NOT "${unit_target_execution_policy}" STREQUAL "Serial")

        #----------------------------------------------------------------------#
        # Add the executable
        #----------------------------------------------------------------------#

        add_executable(${unit_target_name} ${_UNIT_SOURCES}
            ${unit_policy_runtime})

        #----------------------------------------------------------------------#
        # Add user-specified library dependencies
        #----------------------------------------------------------------------#

        if(NOT ${unit_target_libraries} STREQUAL "None")
            foreach(library ${unit_target_libraries})
                target_link_libraries(${unit_target_name} ${library})
            endforeach(library)
        endif(NOT ${unit_target_libraries} STREQUAL "None")

        #----------------------------------------------------------------------#
        # Add GTest libraries
        #----------------------------------------------------------------------#

        target_link_libraries(${unit_target_name} ${GTEST_LIBRARIES})

        #----------------------------------------------------------------------#
        # Add library dependecies for policy runtime
        #----------------------------------------------------------------------#

        if("${unit_target_execution_policy}" STREQUAL "Serial")
            target_link_libraries(${unit_target_name}
                ${GTEST_MAIN_LIBRARIES})
        else()
            target_link_libraries(${unit_target_name}
                ${unit_policy_libraries})
        endif("${unit_target_execution_policy}" STREQUAL "Serial")

        #----------------------------------------------------------------------#
        # Change the output directory to the test subdirectory
        #----------------------------------------------------------------------#

        set_target_properties(${unit_target_name}
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/test)

        #----------------------------------------------------------------------#
        # Add Jenkins flags
        #----------------------------------------------------------------------#

        if(ENABLE_JENKINS_OUTPUT)
            set(JENKINS_FLAGS "--gtest_output=xml:${CMAKE_BINARY_DIR}/test/${unit_target_name}.xml --gtest_color=yes")
        endif(ENABLE_JENKINS_OUTPUT)

        #----------------------------------------------------------------------#
        # Add the test target to CTest
        #----------------------------------------------------------------------#

        string(REPLACE "|" ";" thread_instance_list
            ${unit_target_execution_threads})

        list(LENGTH thread_instance_list thread_instances)

        if(${thread_instances} GREATER 1)
            foreach(instance ${thread_instance_list})
                add_test(${unit_target_name}_${instance}
                    ${CMAKE_BINARY_DIR}/test/${unit_target_name}
                    ${JENKINS_FLAGS}
                    COMMAND "${unit_policy_exec} ${unit_policy_exec_threads} ${instance}")
            endforeach(instance)
        else()
            add_test(${unit_target_name}
                ${CMAKE_BINARY_DIR}/test/${unit_target_name}
                ${JENKINS_FLAGS})
        endif(${thread_instances} GREATER 1)

    endforeach(unit)

endif(${CINCH_TOP_LEVEL_PROJECT})

#------------------------------------------------------------------------------#
# Application directories
#------------------------------------------------------------------------------#

if(CINCH_APPLICATION_DIRECTORIES)
    foreach(application_directory ${CINCH_APPLICATION_DIRECTORIES})

        add_subdirectory(${application_directory})

    endforeach(application_directory)

endif(CINCH_APPLICATION_DIRECTORIES)

#------------------------------------------------------------------------------#
# Formatting options for emacs and vim.
# vim: set tabstop=4 shiftwidth=4 expandtab :
#------------------------------------------------------------------------------#
