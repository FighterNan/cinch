#------------------------------------------------------------------------------#
# Copyright (c) 2014 Los Alamos National Security, LLC
# All rights reserved.
#------------------------------------------------------------------------------#

################################################################################
# Please Do Not Edit This File Unless You Know What You Are Doing!!!
#
# Project-specific configuration rules should be added in the 'config'
# subdirectory of the top-level of this project in the appropriate file,
# e.g., package configuration options should go in 'config/packages.cmake'.
#
# For more documentation on the design philosophy of this build system
# and the recognized configuration files that can be added to the 'config'
# subdirectory, please look in 'cinch/README.md' and 'cinch/INSTALL.md'
# from the top-level of this project.
#
# Any changes to the basic build template should be discussed with the
# project maintainers.
################################################################################

#------------------------------------------------------------------------------#
# Require some version of cmake
#------------------------------------------------------------------------------#

cmake_minimum_required(VERSION 2.8)

#------------------------------------------------------------------------------#
# Add path for cinch modules
#------------------------------------------------------------------------------#

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cinch/cmake)

#------------------------------------------------------------------------------#
# Cinch includes
#------------------------------------------------------------------------------#

include(info)
include(common)
include(insource)
include(subdirlist)
include(unit)
include(documentation)
include(doxygen)
include(version)

#------------------------------------------------------------------------------#
# Print useful information
#------------------------------------------------------------------------------#

if(CMAKE_INSTALL_PREFIX)
    message(STATUS "Install prefix set to ${CMAKE_INSTALL_PREFIX}")
endif(CMAKE_INSTALL_PREFIX)

if(CMAKE_CXX_FLAGS)
    message(STATUS "C++ compiler flags set to ${CMAKE_CXX_FLAGS}")
endif(CMAKE_CXX_FLAGS)

if(CMAKE_C_FLAGS)
    message(STATUS "C compiler flags set to ${CMAKE_C_FLAGS}")
endif(CMAKE_C_FLAGS)

if(CMAKE_FORTRAN_FLAGS)
    message(STATUS "Fortran compiler flags set to ${CMAKE_FORTRAN_FLAGS}")
endif(CMAKE_FORTRAN_FLAGS)

#------------------------------------------------------------------------------#
# Include project configuration
#------------------------------------------------------------------------------#

# Initialize these to avoid capture of parent state
unset(CINCH_APPLICATION_DIRECTORY)
unset(CINCH_LIBRARY_TARGET)
unset(CINCH_CONFIG_SUBPROJECTS)

include(${CMAKE_CURRENT_SOURCE_DIR}/config/project.cmake)

#------------------------------------------------------------------------------#
# Create a version for the project
#------------------------------------------------------------------------------#

set(STATIC_VERSION "git describe" CACHE STRING "Set a static version")

if(STATIC_VERSION)
    set(${PROJECT_NAME}_VERSION ${STATIC_VERSION})
else()
    cinch_make_version()
endif(STATIC_VERSION)

message(STATUS "Creating build for version "
    "${PROJECT_NAME}-${${PROJECT_NAME}_VERSION}")

#------------------------------------------------------------------------------#
# Keep users from creating insource builds.
#------------------------------------------------------------------------------#

cinch_prevent_insource_builds()

#------------------------------------------------------------------------------#
# Include package requirements
#------------------------------------------------------------------------------#

include(${CMAKE_CURRENT_SOURCE_DIR}/config/packages.cmake)

#------------------------------------------------------------------------------#
# Include project documentation
#------------------------------------------------------------------------------#

include(${CMAKE_CURRENT_SOURCE_DIR}/config/documentation.cmake)

#------------------------------------------------------------------------------#
# Add top-level targets
#------------------------------------------------------------------------------#

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})

    #--------------------------------------------------------------------------#
    # This is a top-level build
    #--------------------------------------------------------------------------#

    add_custom_target(distclean rm -rf ${CMAKE_BINARY_DIR}/*)
    set(CINCH_CONFIG_INFOTAG)
    set(CINCH_CONFIG_INSTTAG)

    #--------------------------------------------------------------------------#
    # Add support for ctest and GTest
    #--------------------------------------------------------------------------#

    option(ENABLE_UNIT_TESTS "Enable unit testing" OFF)
    option(ENABLE_JENKINS_OUTPUT
        "Generate jenkins xml output for every test" OFF)

    if(ENABLE_UNIT_TESTS)
        enable_testing()
        find_package(GTest QUIET)
        if(GTEST_FOUND)
          include_directories(${GTEST_INCLUDE_DIRS})
        else()
          add_subdirectory(cinch/gtest)
          include_directories(cinch/gtest/include)
          set(GTEST_BOTH_LIBRARIES gtest gtest_main)
        endif()
    endif(ENABLE_UNIT_TESTS)

else()

    #--------------------------------------------------------------------------#
    # This is a submodule
    #--------------------------------------------------------------------------#

    set(CINCH_CONFIG_INFOTAG "${PROJECT_NAME}.")
    set(CINCH_CONFIG_INSTTAG "/${PROJECT_NAME}")

endif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})

#------------------------------------------------------------------------------#
# Add support for Doxygen documentation
#
# NOTE: This depends on CINCH_CONFIG_INFOTAG being set.
#------------------------------------------------------------------------------#

cinch_add_doxygen()

#------------------------------------------------------------------------------#
# Set output directories for targets
#------------------------------------------------------------------------------#

# Global project settings
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

#------------------------------------------------------------------------------#
# Add sub-projects
#------------------------------------------------------------------------------#

if(CINCH_CONFIG_SUBPROJECTS)
    foreach(subproject ${CINCH_CONFIG_SUBPROJECTS})
        add_subdirectory(${subproject})
        include_directories(${${subproject}_INCDIRS})
    endforeach(subproject)
endif(CINCH_CONFIG_SUBPROJECTS)

#------------------------------------------------------------------------------#
# Library target
#------------------------------------------------------------------------------#

if(CINCH_LIBRARY_TARGET)

    add_subdirectory(src)

    include_directories(${${CINCH_LIBRARY_TARGET}_INCDIRS})

    #--------------------------------------------------------------------------#
    # Set this for parent level build (if it really exists)
    #--------------------------------------------------------------------------#

    if(NOT ${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
        set(${PROJECT_NAME}_INCDIRS ${${CINCH_LIBRARY_TARGET}_INCDIRS}
            PARENT_SCOPE)
    endif(NOT ${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})

    #--------------------------------------------------------------------------#
    # Generate info target
    #--------------------------------------------------------------------------#

    cinch_make_info("${CINCH_CONFIG_INFOTAG}main"
        "${${CINCH_LIBRARY_TARGET}_HEADERS}"
        "${${CINCH_LIBRARY_TARGET}_SOURCES}")

    #--------------------------------------------------------------------------#
    # Create relative paths for headers
    #--------------------------------------------------------------------------#

    unset(REL_HEADERS)
    foreach(_HEADER ${${CINCH_LIBRARY_TARGET}_HEADERS})
        string(REGEX REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/src/" ""
            _REL_HEADER ${_HEADER})
        list(APPEND REL_HEADERS ${_REL_HEADER})
    endforeach(_HEADER)

    #--------------------------------------------------------------------------#
    # Generate common header
    #--------------------------------------------------------------------------#

    cinch_make_common_header("${CINCH_LIBRARY_TARGET}" "${REL_HEADERS}")

    #--------------------------------------------------------------------------#
    # Add a rule to build the library
    #--------------------------------------------------------------------------#

    if(NOT "${${CINCH_LIBRARY_TARGET}_SOURCES}" STREQUAL "")
        add_library(${CINCH_LIBRARY_TARGET} ${${CINCH_LIBRARY_TARGET}_SOURCES})
    endif()


    #--------------------------------------------------------------------------#
    # Add install targets
    #--------------------------------------------------------------------------#

    if(NOT "${${CINCH_LIBRARY_TARGET}_SOURCES}" STREQUAL "")
         install(TARGETS ${CINCH_LIBRARY_TARGET} DESTINATION lib)
    endif()

    foreach(FILE ${REL_HEADERS})
        get_filename_component(DIR ${FILE} DIRECTORY)
        install(FILES src/${FILE} DESTINATION
            include${CINCH_CONFIG_INSTTAG}/${DIR})
    endforeach(FILE)

endif(CINCH_LIBRARY_TARGET)

#------------------------------------------------------------------------------#
# Application targets
#------------------------------------------------------------------------------#

if(CINCH_APPLICATION_DIRECTORY)
    add_subdirectory(${CINCH_APPLICATION_DIRECTORY})
endif(CINCH_APPLICATION_DIRECTORY)

#------------------------------------------------------------------------------#
# Formatting options for emacs and vim.
# vim: set tabstop=4 shiftwidth=4 expandtab :
#------------------------------------------------------------------------------#
